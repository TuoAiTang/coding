

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
void middleList(struct ListNode* head, struct ListNode** mid){
	struct ListNode *fast = head, *slow = head;
	while(fast && fast->next){
		fast = fast->next->next;
		slow = slow->next;
	}
    //要改变指针指向的内容，用指针
    //要改变指针的指向，用指针的指针
    //改变时用间接引用来改变指针指向变量
	*mid = slow;
}

void ReverseList(struct ListNode* head, struct ListNode** reverse){
	struct ListNode *p = head, *newH = NULL, *tmp;
	while(p){
		tmp = p->next;
		p->next = newH;
		newH = p;
		p = tmp;
	}
	*reverse = newH;
}

bool isPalindrome(struct ListNode* head) {
	if(head == NULL)
		return true;
	struct ListNode *mid, *reverseH;
	middleList(head, &mid);
	ReverseList(mid, &reverseH);
    //head链不短于reverseH链
    //middle反转后正向访问只能往前推进一个节点
	while(reverseH){
		if(reverseH->val != head->val)
			return false;
		reverseH = reverseH->next;
		head = head->next;
	}
	return true;
}