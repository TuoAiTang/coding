

typedef struct node{
	int val;
    struct node* next;
} node;

typedef struct{
	node* head;
	node* minhead;
} MinStack;

/** initialize your data structure here. */
MinStack* minStackCreate(int maxSize) {
    node* head = (node*)malloc(sizeof(node));
    head->next = NULL;
    node* minhead = (node*)malloc(sizeof(node));
    minhead->next = NULL;
    MinStack* stack = (MinStack*)malloc(sizeof(MinStack));
    stack->head = head;
    stack->minhead = minhead;
    return stack;
}

void minStackPush(MinStack* obj, int x) {
    node* top = (node*)malloc(sizeof(node));
    top->val = x;
    top->next = obj->head->next;
    obj->head->next = top;

    if(!obj->minhead->next || obj->minhead->next->val >= x){
    	node* mintop = (node*)malloc(sizeof(node));
    	mintop->val = x;
    	mintop->next = obj->minhead->next;
    	obj->minhead->next = mintop;
    }
}

void minStackPop(MinStack* obj) {
   	node* head = obj->head;
   	node* minhead = obj->minhead;
   	node* tmp;

   	tmp = head->next;
   	int val = tmp->val;
   	head->next = tmp->next;
   	free(tmp);

   	if(minhead->next->val == val){
   		tmp = minhead->next;
   		minhead->next = tmp->next;
   		free(tmp);
   	}

}

int minStackTop(MinStack* obj) {
    return obj->head->next->val;
}

int minStackGetMin(MinStack* obj) {
    return obj->minhead->next->val;
}

void minStackFree(MinStack* obj) {
    node* head = obj->head;
    node* minhead = obj->minhead;
    node* tmp;
    while(head){
    	tmp = head;
    	head = head->next;
    	free(tmp);
    }
    while(minhead){
    	tmp = minhead;
    	minhead = minhead->next;
    	free(tmp);
    }
}

/**
 * Your MinStack struct will be instantiated and called as such:
 * struct MinStack* obj = minStackCreate(maxSize);
 * minStackPush(obj, x);
 * minStackPop(obj);
 * int param_3 = minStackTop(obj);
 * int param_4 = minStackGetMin(obj);
 * minStackFree(obj);
 */