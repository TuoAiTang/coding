

/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* getParseLog(char const * s){
	int* ret = (int*)calloc(3, sizeof(int));

	while(*s != ':'){
		ret[0] = 10 * ret[0] + *s - '0';
		s ++;
	}
	s ++;
	if(*s == 's'){
		ret[1] = 1;
		s += 6;
	}else{
		ret[1] = 0;
		s += 4;
	}
	while(*s != '\0'){
		ret[2] = 10 * ret[2] + *s - '0';
		s ++;
	}
	return ret;
}

int* exclusiveTime(int n, char** logs, int logsSize, int* returnSize) {
	*returnSize = n;
    int* ret = (int*)calloc(n, sizeof(int));
    int* stack = (int*)malloc((logsSize / 2) * sizeof(int));
    int top = -1;
    int pre = 0;
    int* log;
    for (int i = 0; i < logsSize; ++i)
    {
    	log = getParseLog(logs[i]);
    	if(log[1] == 1){
    		if(top != -1)
    			ret[stack[top]] += log[2] - pre;
    		stack[++top] = log[0];
    		pre = log[2];
    	}else{
    		ret[stack[top]] += log[2] - pre + 1;
    		top--;
    		pre = log[2] + 1;
    	}
    	free(log);
    }
    free(stack);
    return ret;
}