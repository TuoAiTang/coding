

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* merge(struct ListNode* left, struct ListNode* right){
	struct ListNode dummy = {-1, NULL};
	struct ListNode* tail = &dummy;
	while(left && right){
		//insert the smaller val 
		if(left->val > right->val){
			//insert at tail
			tail->next = right;
			right = right->next;
			tail = tail->next;
		}
		else{
			tail->next = left;
			left = left->next;
			tail = tail->next;
		}		
	}
	tail->next = left ? left : right;
	return dummy.next;
}

struct ListNode* sortList(struct ListNode* head) {
    if(!head || !head->next) return head;
    struct ListNode* slow = head, *fast = head->next;
    struct ListNode* mid = NULL;
    while(fast && fast->next){
    	slow = slow->next;
    	fast = fast->next->next;
    }
    mid = slow->next; /*the right part head*/
    slow->next = NULL; /*cut*/
    return merge(sortList(head), sortList(mid));
}